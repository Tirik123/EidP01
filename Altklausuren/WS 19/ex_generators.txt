1. [6 Punkte] Schreiben Sie eine Generator-Funktion `accumulate` die eine Liste `xs` von Zahlen als Argument nimmt, und die Summen über alle Anfangsstücke der Liste generiert.

Beispiel:
[code]
>>> list(accumulate([1,2,3,4])) == [1, 1+2, 1+2+3, 1+2+3+4] == [1, 3, 6, 10]
True
[/code]

2. [6 Punkte] Schreiben Sie eine Generator-Funktion `char_range` die zwei einelementige Strings `start` und `end` als Argumente nimmt und alle Zeichen zwischen `start` und `end` generiert.

Beispiel:
[code]
>>> list(char_range('d', 'h')
['d', 'e', 'f', 'g', 'h']
[/code]

Sie können hierzu die Funktionen `ord` und `chr` benutzen um zwischen Zeichen und ganzen Zahlen zu konvertieren.

Beispiel:
[code]
>>> ord('a')
97
>>> chr(97)
'a'
[/code]

3. [6 Punkte] Schreiben Sie eine Generator-Funktion `partitions` die eine Liste `xs` als Argument nimmt und für alle Elemente `x` aus `xs` ein Paar `(x, ys)` generiert, sodass `ys` die Liste `xs` ohne das Element `x` ist.

Beispiel:
[code]
>>> list(partitions([1,2,3,4]))
[ (1, [2,3,4]), (2, [1,3,4]), (3, [1,2,4]), (4, [1,2,3]) ]
[/code]

4. [3 Punkte] Schreiben Sie jeweils einen sinnvollen Unittest für `accumulate`, `char_range` und `partitions`.
